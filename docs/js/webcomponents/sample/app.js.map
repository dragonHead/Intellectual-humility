{
  "version": 3,
  "sources": ["../../../../docs/js/webcomponents/sample/sample1.js", "../../../../docs/js/webcomponents/sample/app.js"],
  "sourcesContent": ["const template = document.createElement('template');\ntemplate.innerHTML = `\n<style>\np {\nfont-weight: bold;\n}\n</style>\n<p>Sample Cstom Element!</p>\n<slot name=\"my-text\">デフォルトテキスト</slot>\n`;\nexport class SampleElement extends HTMLElement {\n    constructor() {\n        super();\n        const shadowRoot = this.attachShadow({mode: 'open'});\n        shadowRoot.appendChild(template.content.cloneNode(true));\n\n        console.debug('constructor');\n    }\n\n    connectedCallback() {\n        // ドキュメントに接続されるたび\n        console.debug('connectedCallback');\n    }\n\n    disconectedCallback() {\n        // DOMから切断されるたび\n        console.debug('disconnectedCallback');\n    }\n\n    static get observedAttributes() {\n        // 観測属性定義\n        return ['name'];\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        //スタム要素の属性の1つが追加、削除、または変更されるたび\n        console.debug(`attributeChangedCallback ${name}:${oldValue}->${newValue}`);\n    }\n\n    adoptedCallback(oldDocument, newDocument) {\n        //カスタム要素が新しいドキュメントに移動するたび\n        console.debug(`adoptedCallback ${oldDocument}->${newDocument}`);\n    }\n}", "import { SampleElement } from './sample1.js';\ncustomElements.define('i-sample', SampleElement);"],
  "mappings": "AAAA,GAAM,GAAW,SAAS,cAAc,YACxC,EAAS,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASd,mBAA4B,YAAY,CAC3C,aAAc,CACV,QAEA,AADmB,KAAK,aAAa,CAAC,KAAM,SACjC,YAAY,EAAS,QAAQ,UAAU,KAElD,QAAQ,MAAM,eAGlB,mBAAoB,CAEhB,QAAQ,MAAM,qBAGlB,qBAAsB,CAElB,QAAQ,MAAM,kCAGP,qBAAqB,CAE5B,MAAO,CAAC,QAGZ,yBAAyB,EAAM,EAAU,EAAU,CAE/C,QAAQ,MAAM,4BAA4B,KAAQ,MAAa,KAGnE,gBAAgB,EAAa,EAAa,CAEtC,QAAQ,MAAM,mBAAmB,MAAgB,OCxCzD,eAAe,OAAO,WAAY",
  "names": []
}
